// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum OrderStatus {
  PENDING
  PAID
  CANCELLED
}

enum ProductStatus {
  AVAILABLE
  OUT_OF_STOCK
  HIDDEN
}

enum UserRole {
  USER
  ADMIN
}

// NextAuth core models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // Custom fields
  displayName   String?
  handle        String?   @unique
  role          UserRole  @default(USER)

  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  reviews       Review[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Domain models
model Category {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id              String         @id @default(cuid())
  title           String
  slug            String         @unique
  description     String
  price           Decimal        @db.Decimal(10, 2)
  compareAtPrice  Decimal?       @db.Decimal(10, 2)
  status          ProductStatus  @default(AVAILABLE)
  categoryId      String

  category        Category       @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  reviews         Review[]
  orderItems      OrderItem[]

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  content   String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id        String       @id @default(cuid())
  userId    String
  status    OrderStatus  @default(PENDING)
  total     Decimal      @db.Decimal(10, 2)
  createdAt DateTime     @default(now())

  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int      @default(1)
  price     Decimal  @db.Decimal(10, 2)

  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Restrict)
}
